#!/usr/bin/env node
// Generate the list of technologies in the README.md for this repo.
const path = require('path');
const fs = require('fs');
const readline = require('readline');
const parseMarkdown = require('front-matter-markdown');
const { isBefore } = require('date-fns');

(() => {
    const files = fs.readdirSync(path.resolve(__dirname, '..', 'src', 'content', 'blog'));
    const list = files.map((file) => {
        return {
            file,
            attributes: parseMarkdown(fs.readFileSync(path.resolve(__dirname, '..', 'src', 'content', 'blog', file)).toString()),
        };
    })
    .reduce((p, { file, attributes }) => {
        if(!attributes.published)
            return p;
        p.push({
            url: `https://codyogden.com/blog/${file.replace('.md', '')}`,
            date: attributes.date_published,
            title: attributes.title,
        });
        return p;
    }, [])
    .sort((a, b) => {
        const a_date = new Date(a.date);
        const b_date = new Date(b.date);
        return isBefore(a_date, b_date) ? 1 : isBefore(b_date, a_date) ? -1 : 0;
    });

    const readmeFile = fs.readFileSync(path.resolve(__dirname, '..', 'README.md')).toString().split("\n");
    const i_start = () => readmeFile.indexOf('<!--START_WRITINGS-->');
    const i_end = () => readmeFile.indexOf('<!--END_WRITINGS-->');
    readmeFile.splice(i_start() + 2, i_end() - i_start() - 2);
    const after_list = readmeFile.splice(i_end());

    fs.writeFileSync(path.resolve(__dirname, '..', 'README.md'), `${[
        ...readmeFile,
        ...list.map((i) => `- [${i.title}](${i.url})`),
        ...after_list,
    ].join('\n')}`);
})();
